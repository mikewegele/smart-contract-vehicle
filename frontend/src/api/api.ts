/* tslint:disable */
/* eslint-disable */
/**
 * SmartContractVehicle
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'extraInfo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'floor'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    'houseNumber': number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'street': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'postalCode': string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'country': string;
}
/**
 * 
 * @export
 * @interface AutomotiveCompany
 */
export interface AutomotiveCompany {
    /**
     * 
     * @type {string}
     * @memberof AutomotiveCompany
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AutomotiveCompany
     */
    'name': string | null;
    /**
     * 
     * @type {Array<VehicleModel>}
     * @memberof AutomotiveCompany
     */
    'models': Array<VehicleModel> | null;
}
/**
 * 
 * @export
 * @interface AutomotiveCompanyTO
 */
export interface AutomotiveCompanyTO {
    /**
     * 
     * @type {string}
     * @memberof AutomotiveCompanyTO
     */
    'name': string | null;
    /**
     * 
     * @type {string}
     * @memberof AutomotiveCompanyTO
     */
    'imagePath'?: string | null;
}
/**
 * 
 * @export
 * @interface Car
 */
export interface Car {
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'vin': string | null;
    /**
     * 
     * @type {User}
     * @memberof Car
     */
    'owner': User;
    /**
     * 
     * @type {VehicleTrim}
     * @memberof Car
     */
    'trim': VehicleTrim;
    /**
     * 
     * @type {Point}
     * @memberof Car
     */
    'currentPosition': Point;
    /**
     * 
     * @type {number}
     * @memberof Car
     */
    'remainingReach'?: number;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'colour': string | null;
}
/**
 * 
 * @export
 * @interface CarTO
 */
export interface CarTO {
    /**
     * 
     * @type {VehicleTrimTO}
     * @memberof CarTO
     */
    'trim': VehicleTrimTO;
    /**
     * 
     * @type {Point}
     * @memberof CarTO
     */
    'currentPosition': Point;
    /**
     * 
     * @type {number}
     * @memberof CarTO
     */
    'remainingReach'?: number;
    /**
     * 
     * @type {string}
     * @memberof CarTO
     */
    'colour': string | null;
}
/**
 * 
 * @export
 * @interface Coordinate
 */
export interface Coordinate {
    /**
     * 
     * @type {number}
     * @memberof Coordinate
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof Coordinate
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof Coordinate
     */
    'z'?: number;
    /**
     * 
     * @type {number}
     * @memberof Coordinate
     */
    'm'?: number;
    /**
     * 
     * @type {Coordinate}
     * @memberof Coordinate
     */
    'coordinateValue'?: Coordinate;
    /**
     * 
     * @type {boolean}
     * @memberof Coordinate
     */
    'isValid'?: boolean;
}
/**
 * 
 * @export
 * @interface CoordinateSequence
 */
export interface CoordinateSequence {
    /**
     * 
     * @type {number}
     * @memberof CoordinateSequence
     */
    'dimension'?: number;
    /**
     * 
     * @type {number}
     * @memberof CoordinateSequence
     */
    'measures'?: number;
    /**
     * 
     * @type {number}
     * @memberof CoordinateSequence
     */
    'spatial'?: number;
    /**
     * 
     * @type {Ordinates}
     * @memberof CoordinateSequence
     */
    'ordinates'?: Ordinates;
    /**
     * 
     * @type {boolean}
     * @memberof CoordinateSequence
     */
    'hasZ'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CoordinateSequence
     */
    'hasM'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CoordinateSequence
     */
    'zOrdinateIndex'?: number;
    /**
     * 
     * @type {number}
     * @memberof CoordinateSequence
     */
    'mOrdinateIndex'?: number;
    /**
     * 
     * @type {Coordinate}
     * @memberof CoordinateSequence
     */
    'first'?: Coordinate;
    /**
     * 
     * @type {Coordinate}
     * @memberof CoordinateSequence
     */
    'last'?: Coordinate;
    /**
     * 
     * @type {number}
     * @memberof CoordinateSequence
     */
    'count'?: number;
}


/**
 * 
 * @export
 * @interface CoordinateSequenceFactory
 */
export interface CoordinateSequenceFactory {
    /**
     * 
     * @type {Ordinates}
     * @memberof CoordinateSequenceFactory
     */
    'ordinates'?: Ordinates;
}


/**
 * 
 * @export
 * @enum {number}
 */

export const Dimension = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_MINUS_3: -3,
    NUMBER_MINUS_2: -2,
    NUMBER_MINUS_1: -1
} as const;

export type Dimension = typeof Dimension[keyof typeof Dimension];


/**
 * 
 * @export
 * @interface Drivetrain
 */
export interface Drivetrain {
    /**
     * 
     * @type {number}
     * @memberof Drivetrain
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Drivetrain
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface ElevationModel
 */
export interface ElevationModel {
    /**
     * 
     * @type {Envelope}
     * @memberof ElevationModel
     */
    'extent'?: Envelope;
}
/**
 * 
 * @export
 * @interface Envelope
 */
export interface Envelope {
    /**
     * 
     * @type {boolean}
     * @memberof Envelope
     */
    'isNull'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'diameter'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'minX'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'maxX'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'minY'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'maxY'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'area'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'minExtent'?: number;
    /**
     * 
     * @type {number}
     * @memberof Envelope
     */
    'maxExtent'?: number;
    /**
     * 
     * @type {Coordinate}
     * @memberof Envelope
     */
    'centre'?: Coordinate;
}
/**
 * 
 * @export
 * @interface FuelType
 */
export interface FuelType {
    /**
     * 
     * @type {number}
     * @memberof FuelType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FuelType
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Geometry
 */
export interface Geometry {
    /**
     * 
     * @type {GeometryFactory}
     * @memberof Geometry
     */
    'factory'?: GeometryFactory;
    /**
     * 
     * @type {any}
     * @memberof Geometry
     */
    'userData'?: any | null;
    /**
     * 
     * @type {number}
     * @memberof Geometry
     */
    'srid'?: number;
    /**
     * 
     * @type {string}
     * @memberof Geometry
     */
    'geometryType'?: string | null;
    /**
     * 
     * @type {OgcGeometryType}
     * @memberof Geometry
     */
    'ogcGeometryType'?: OgcGeometryType;
    /**
     * 
     * @type {PrecisionModel}
     * @memberof Geometry
     */
    'precisionModel'?: PrecisionModel;
    /**
     * 
     * @type {Coordinate}
     * @memberof Geometry
     */
    'coordinate'?: Coordinate;
    /**
     * 
     * @type {Array<Coordinate>}
     * @memberof Geometry
     */
    'coordinates'?: Array<Coordinate> | null;
    /**
     * 
     * @type {number}
     * @memberof Geometry
     */
    'numPoints'?: number;
    /**
     * 
     * @type {number}
     * @memberof Geometry
     */
    'numGeometries'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Geometry
     */
    'isSimple'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Geometry
     */
    'isValid'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Geometry
     */
    'isEmpty'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Geometry
     */
    'area'?: number;
    /**
     * 
     * @type {number}
     * @memberof Geometry
     */
    'length'?: number;
    /**
     * 
     * @type {Point}
     * @memberof Geometry
     */
    'centroid'?: Point;
    /**
     * 
     * @type {Point}
     * @memberof Geometry
     */
    'interiorPoint'?: Point;
    /**
     * 
     * @type {Point}
     * @memberof Geometry
     */
    'pointOnSurface'?: Point;
    /**
     * 
     * @type {Dimension}
     * @memberof Geometry
     */
    'dimension'?: Dimension;
    /**
     * 
     * @type {Geometry}
     * @memberof Geometry
     */
    'boundary'?: Geometry;
    /**
     * 
     * @type {Dimension}
     * @memberof Geometry
     */
    'boundaryDimension'?: Dimension;
    /**
     * 
     * @type {Geometry}
     * @memberof Geometry
     */
    'envelope'?: Geometry;
    /**
     * 
     * @type {Envelope}
     * @memberof Geometry
     */
    'envelopeInternal'?: Envelope;
    /**
     * 
     * @type {boolean}
     * @memberof Geometry
     */
    'isRectangle'?: boolean;
}


/**
 * 
 * @export
 * @interface GeometryFactory
 */
export interface GeometryFactory {
    /**
     * 
     * @type {PrecisionModel}
     * @memberof GeometryFactory
     */
    'precisionModel'?: PrecisionModel;
    /**
     * 
     * @type {CoordinateSequenceFactory}
     * @memberof GeometryFactory
     */
    'coordinateSequenceFactory'?: CoordinateSequenceFactory;
    /**
     * 
     * @type {number}
     * @memberof GeometryFactory
     */
    'srid'?: number;
    /**
     * 
     * @type {ElevationModel}
     * @memberof GeometryFactory
     */
    'elevationModel'?: ElevationModel;
    /**
     * 
     * @type {NtsGeometryServices}
     * @memberof GeometryFactory
     */
    'geometryServices'?: NtsGeometryServices;
}
/**
 * 
 * @export
 * @interface NtsGeometryServices
 */
export interface NtsGeometryServices {
    /**
     * 
     * @type {object}
     * @memberof NtsGeometryServices
     */
    'geometryOverlay'?: object;
    /**
     * 
     * @type {object}
     * @memberof NtsGeometryServices
     */
    'geometryRelate'?: object;
    /**
     * 
     * @type {object}
     * @memberof NtsGeometryServices
     */
    'coordinateEqualityComparer'?: object;
    /**
     * 
     * @type {number}
     * @memberof NtsGeometryServices
     */
    'defaultSRID'?: number;
    /**
     * 
     * @type {CoordinateSequenceFactory}
     * @memberof NtsGeometryServices
     */
    'defaultCoordinateSequenceFactory'?: CoordinateSequenceFactory;
    /**
     * 
     * @type {PrecisionModel}
     * @memberof NtsGeometryServices
     */
    'defaultPrecisionModel'?: PrecisionModel;
    /**
     * 
     * @type {ElevationModel}
     * @memberof NtsGeometryServices
     */
    'defaultElevationModel'?: ElevationModel;
}
/**
 * 
 * @export
 * @enum {number}
 */

export const OgcGeometryType = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15,
    NUMBER_16: 16
} as const;

export type OgcGeometryType = typeof OgcGeometryType[keyof typeof OgcGeometryType];


/**
 * 
 * @export
 * @enum {number}
 */

export const Ordinates = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_64: 64,
    NUMBER_128: 128,
    NUMBER_256: 256,
    NUMBER_512: 512,
    NUMBER_1024: 1024,
    NUMBER_2048: 2048,
    NUMBER_4096: 4096,
    NUMBER_8192: 8192,
    NUMBER_16384: 16384,
    NUMBER_32768: 32768,
    NUMBER_65535: 65535,
    NUMBER_65536: 65536,
    NUMBER_65539: 65539,
    NUMBER_65543: 65543,
    NUMBER_131072: 131072,
    NUMBER_262144: 262144,
    NUMBER_524288: 524288,
    NUMBER_1048576: 1048576,
    NUMBER_2097152: 2097152,
    NUMBER_4194304: 4194304,
    NUMBER_8388608: 8388608,
    NUMBER_16777216: 16777216,
    NUMBER_33554432: 33554432,
    NUMBER_67108864: 67108864,
    NUMBER_134217728: 134217728,
    NUMBER_268435456: 268435456,
    NUMBER_536870912: 536870912,
    NUMBER_1073741824: 1073741824,
    NUMBER_MINUS_2147483648: -2147483648,
    NUMBER_MINUS_65536: -65536,
    NUMBER_MINUS_1: -1
} as const;

export type Ordinates = typeof Ordinates[keyof typeof Ordinates];


/**
 * 
 * @export
 * @interface Point
 */
export interface Point {
    /**
     * 
     * @type {GeometryFactory}
     * @memberof Point
     */
    'factory'?: GeometryFactory;
    /**
     * 
     * @type {any}
     * @memberof Point
     */
    'userData'?: any | null;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'srid'?: number;
    /**
     * 
     * @type {PrecisionModel}
     * @memberof Point
     */
    'precisionModel'?: PrecisionModel;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'numGeometries'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Point
     */
    'isSimple'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Point
     */
    'isValid'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'area'?: number;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'length'?: number;
    /**
     * 
     * @type {Point}
     * @memberof Point
     */
    'centroid'?: Point;
    /**
     * 
     * @type {Point}
     * @memberof Point
     */
    'interiorPoint'?: Point;
    /**
     * 
     * @type {Point}
     * @memberof Point
     */
    'pointOnSurface'?: Point;
    /**
     * 
     * @type {Geometry}
     * @memberof Point
     */
    'envelope'?: Geometry;
    /**
     * 
     * @type {Envelope}
     * @memberof Point
     */
    'envelopeInternal'?: Envelope;
    /**
     * 
     * @type {boolean}
     * @memberof Point
     */
    'isRectangle'?: boolean;
    /**
     * 
     * @type {CoordinateSequence}
     * @memberof Point
     */
    'coordinateSequence'?: CoordinateSequence;
    /**
     * 
     * @type {Array<Coordinate>}
     * @memberof Point
     */
    'coordinates'?: Array<Coordinate> | null;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'numPoints'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Point
     */
    'isEmpty'?: boolean;
    /**
     * 
     * @type {Dimension}
     * @memberof Point
     */
    'dimension'?: Dimension;
    /**
     * 
     * @type {Dimension}
     * @memberof Point
     */
    'boundaryDimension'?: Dimension;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'y'?: number;
    /**
     * 
     * @type {Coordinate}
     * @memberof Point
     */
    'coordinate'?: Coordinate;
    /**
     * 
     * @type {string}
     * @memberof Point
     */
    'geometryType'?: string | null;
    /**
     * 
     * @type {OgcGeometryType}
     * @memberof Point
     */
    'ogcGeometryType'?: OgcGeometryType;
    /**
     * 
     * @type {Geometry}
     * @memberof Point
     */
    'boundary'?: Geometry;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'z'?: number;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'm'?: number;
}


/**
 * 
 * @export
 * @interface PrecisionModel
 */
export interface PrecisionModel {
    /**
     * 
     * @type {boolean}
     * @memberof PrecisionModel
     */
    'isFloating'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PrecisionModel
     */
    'maximumSignificantDigits'?: number;
    /**
     * 
     * @type {number}
     * @memberof PrecisionModel
     */
    'scale'?: number;
    /**
     * 
     * @type {number}
     * @memberof PrecisionModel
     */
    'gridSize'?: number;
    /**
     * 
     * @type {PrecisionModels}
     * @memberof PrecisionModel
     */
    'precisionModelType'?: PrecisionModels;
}


/**
 * 
 * @export
 * @enum {number}
 */

export const PrecisionModels = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type PrecisionModels = typeof PrecisionModels[keyof typeof PrecisionModels];


/**
 * 
 * @export
 * @interface RegisterTO
 */
export interface RegisterTO {
    /**
     * 
     * @type {string}
     * @memberof RegisterTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterTO
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterTO
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'normalizedUserName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'normalizedEmail'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'passwordHash'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'securityStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'concurrencyStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'twoFactorEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lockoutEnd'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'accessFailedCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isAdmin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isRenter'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isLessor'?: boolean;
    /**
     * 
     * @type {Array<Car>}
     * @memberof User
     */
    'cars'?: Array<Car> | null;
}
/**
 * 
 * @export
 * @interface VehicleModel
 */
export interface VehicleModel {
    /**
     * 
     * @type {string}
     * @memberof VehicleModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleModel
     */
    'name': string | null;
    /**
     * 
     * @type {AutomotiveCompany}
     * @memberof VehicleModel
     */
    'producer': AutomotiveCompany;
    /**
     * 
     * @type {Array<VehicleTrim>}
     * @memberof VehicleModel
     */
    'trims': Array<VehicleTrim> | null;
}
/**
 * 
 * @export
 * @interface VehicleModelTO
 */
export interface VehicleModelTO {
    /**
     * 
     * @type {AutomotiveCompanyTO}
     * @memberof VehicleModelTO
     */
    'producer': AutomotiveCompanyTO;
    /**
     * 
     * @type {string}
     * @memberof VehicleModelTO
     */
    'name': string | null;
}
/**
 * 
 * @export
 * @interface VehicleTrim
 */
export interface VehicleTrim {
    /**
     * 
     * @type {string}
     * @memberof VehicleTrim
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof VehicleTrim
     */
    'name': string | null;
    /**
     * 
     * @type {VehicleModel}
     * @memberof VehicleTrim
     */
    'model': VehicleModel;
    /**
     * 
     * @type {Array<Car>}
     * @memberof VehicleTrim
     */
    'cars': Array<Car> | null;
    /**
     * 
     * @type {FuelType}
     * @memberof VehicleTrim
     */
    'fuel': FuelType;
    /**
     * 
     * @type {Drivetrain}
     * @memberof VehicleTrim
     */
    'drivetrain': Drivetrain;
}
/**
 * 
 * @export
 * @interface VehicleTrimTO
 */
export interface VehicleTrimTO {
    /**
     * 
     * @type {VehicleModelTO}
     * @memberof VehicleTrimTO
     */
    'model': VehicleModelTO;
    /**
     * 
     * @type {string}
     * @memberof VehicleTrimTO
     */
    'name': string | null;
    /**
     * 
     * @type {string}
     * @memberof VehicleTrimTO
     */
    'fuel': string | null;
    /**
     * 
     * @type {string}
     * @memberof VehicleTrimTO
     */
    'drivetrain': string | null;
    /**
     * 
     * @type {string}
     * @memberof VehicleTrimTO
     */
    'imagePath'?: string | null;
}

/**
 * AddressApi - axios parameter creator
 * @export
 */
export const AddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressDeleteDelete: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Address/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressPostPost: async (address?: Address, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Address/Post`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(address, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressUpdatePatch: async (address?: Address, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Address/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(address, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Address/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressApi - functional programming interface
 * @export
 */
export const AddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAddressDeleteDelete(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAddressDeleteDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressApi.apiAddressDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAddressPostPost(address?: Address, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAddressPostPost(address, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressApi.apiAddressPostPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAddressUpdatePatch(address?: Address, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAddressUpdatePatch(address, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressApi.apiAddressUpdatePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AddressApi.get']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AddressApi - factory interface
 * @export
 */
export const AddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressDeleteDelete(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAddressDeleteDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressPostPost(address?: Address, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAddressPostPost(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Address} [address] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddressUpdatePatch(address?: Address, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAddressUpdatePatch(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.get(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressApi - object-oriented interface
 * @export
 * @class AddressApi
 * @extends {BaseAPI}
 */
export class AddressApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public apiAddressDeleteDelete(id?: number, options?: RawAxiosRequestConfig) {
        return AddressApiFp(this.configuration).apiAddressDeleteDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Address} [address] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public apiAddressPostPost(address?: Address, options?: RawAxiosRequestConfig) {
        return AddressApiFp(this.configuration).apiAddressPostPost(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Address} [address] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public apiAddressUpdatePatch(address?: Address, options?: RawAxiosRequestConfig) {
        return AddressApiFp(this.configuration).apiAddressUpdatePatch(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public get(id?: number, options?: RawAxiosRequestConfig) {
        return AddressApiFp(this.configuration).get(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} email 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginLoginPost: async (email: string, password: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('apiAuthLoginLoginPost', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('apiAuthLoginLoginPost', 'password', password)
            const localVarPath = `/api/Auth/Login/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Logout/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {string} password 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterRegisterPost: async (email: string, password: string, name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('apiAuthRegisterRegisterPost', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('apiAuthRegisterRegisterPost', 'password', password)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiAuthRegisterRegisterPost', 'name', name)
            const localVarPath = `/api/Auth/Register/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginLoginPost(email: string, password: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginLoginPost(email, password, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthLoginLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLogoutLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLogoutLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthLogoutLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} email 
         * @param {string} password 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterRegisterPost(email: string, password: string, name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterRegisterPost(email, password, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthRegisterRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginLoginPost(email: string, password: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthLoginLoginPost(email, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthLogoutLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} email 
         * @param {string} password 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterRegisterPost(email: string, password: string, name: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthRegisterRegisterPost(email, password, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {string} email 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginLoginPost(email: string, password: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginLoginPost(email, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLogoutLogoutPost(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLogoutLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} email 
     * @param {string} password 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterRegisterPost(email: string, password: string, name: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRegisterRegisterPost(email, password, name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CarApi - axios parameter creator
 * @export
 */
export const CarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarQueryGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Car/Query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarApi - functional programming interface
 * @export
 */
export const CarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarQueryGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CarTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarQueryGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarApi.apiCarQueryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CarApi - factory interface
 * @export
 */
export const CarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarQueryGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<CarTO>> {
            return localVarFp.apiCarQueryGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarApi - object-oriented interface
 * @export
 * @class CarApi
 * @extends {BaseAPI}
 */
export class CarApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public apiCarQueryGet(options?: RawAxiosRequestConfig) {
        return CarApiFp(this.configuration).apiCarQueryGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserDeleteDelete: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetGet: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterTO} [registerTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRegisterPost: async (registerTO?: RegisterTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUpdatePatch: async (user?: User, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserDeleteDelete(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserDeleteDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGetGet(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterTO} [registerTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserRegisterPost(registerTO?: RegisterTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserRegisterPost(registerTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserUpdatePatch(user?: User, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserUpdatePatch(user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserUpdatePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserDeleteDelete(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserDeleteDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetGet(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserGetGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterTO} [registerTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRegisterPost(registerTO?: RegisterTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserRegisterPost(registerTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUpdatePatch(user?: User, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserUpdatePatch(user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserDeleteDelete(id?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserDeleteDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserGetGet(id?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGetGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterTO} [registerTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserRegisterPost(registerTO?: RegisterTO, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserRegisterPost(registerTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserUpdatePatch(user?: User, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserUpdatePatch(user, options).then((request) => request(this.axios, this.basePath));
    }
}



