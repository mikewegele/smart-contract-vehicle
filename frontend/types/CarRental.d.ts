/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class CarRental extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): CarRental;
  methods: {
    cars(
      arg0: number | string
    ): TransactionObject<{
      id: string;
      model: string;
      pricePerDay: string;
      isAvailable: boolean;
      renter: string;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: string;
    }>;

    nextCarId(): TransactionObject<string>;

    owner(): TransactionObject<string>;

    helloWorld(): TransactionObject<string>;

    addCar(
      model: string,
      pricePerDay: number | string
    ): TransactionObject<void>;

    rentCar(
      carId: number | string,
      numberOfDays: number | string
    ): TransactionObject<void>;

    returnCar(carId: number | string): TransactionObject<void>;

    getCar(
      carId: number | string
    ): TransactionObject<{
      id: string;
      model: string;
      pricePerDay: string;
      isAvailable: boolean;
      renter: string;
    }>;

    withdraw(): TransactionObject<void>;
  };
  events: {
    CarAdded: ContractEvent<{
      carId: string;
      model: string;
      pricePerDay: string;
      0: string;
      1: string;
      2: string;
    }>;
    CarRented: ContractEvent<{
      carId: string;
      renter: string;
      daysRented: string;
      0: string;
      1: string;
      2: string;
    }>;
    CarReturned: ContractEvent<{
      carId: string;
      renter: string;
      0: string;
      1: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
